plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'

}

Project commonProject = parent == rootProject ? parent.project("Common") : parent.project("Trenzalore-Common")

mixin {
    add commonProject.sourceSets.main, "${mod_id}.refmap.json"
    config("${mod_id}.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    runs {
        if(parent == rootProject) {
            client {
                workingDirectory project.file('run')
                ideaModule "${rootProject.name}.${project.name}.main"
                taskName 'ForgeClient'
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
                mods {
                    modClientRun {
                        source sourceSets.main
                        source commonProject.sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file('run')
                ideaModule "${rootProject.name}.${project.name}.main"
                taskName 'ForgeServer'
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
                mods {
                    modServerRun {
                        source sourceSets.main
                        source commonProject.sourceSets.main
                    }
                }
            }
        }
        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'ForgeData'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source commonProject.sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    compileOnly commonProject
}

tasks.withType(JavaCompile) {
    source(commonProject.sourceSets.main.allSource)
}

processResources {
    from commonProject.sourceSets.main.resources
}


jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName + "-" + project.name
            version project.version
            artifact jar
        }
    }
    repositories {
        if (ENV.NANITE_TOKEN) {
            maven {
                url "https://maven.nanite.dev/${SNAPSHOT ? "snapshots" : "releases"}"
                credentials {
                    username = "nanite"
                    password = "${ENV.NANITE_TOKEN}"
                }
            }
        }
    }
}


if (ENV.CURSE_TOKEN) {
    curseforge {
        apiKey = ENV.CURSE_TOKEN
        project {
            id = project.curse_id
            releaseType = "beta"
            addGameVersion "Forge"
            addGameVersion "${minecraft_version}"
            mainArtifact(jar)
            changelog = file("../CHANGELOG.md")
            changelogType = 'markdown'
        }
    }
}

parent.tasks.curseforgePublish.dependsOn tasks.curseforge