plugins {
    id("dev.nanite.mlp") version("0.1.1-SNAPSHOT")
    id("java-library")
    id("maven-publish")
    id("me.modmuss50.mod-publish-plugin") version "0.3.0"
}


java.toolchain.languageVersion = JavaLanguageVersion.of(17)

multiLoader.root() {
    minecraftVersion.set(project.property("minecraft_version"))
    modID.set(project.property("mod_id"))
    splitSources.set(true)
    convertAccessWidener.set(true)
    accessWidenerFile.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
}

allprojects {
    def isSnapshot = providers.environmentVariable("SNAPSHOT").map {it == "true"}.getOrElse(false)
    version = "${mod_version}+mc${minecraft_version}${isSnapshot ? '-SNAPSHOT' : ''}"
    setArchivesBaseName("${mod_name}-${project.name}".toLowerCase())
    group = "com.unrealdinnerbone"


}

subprojects {


    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'dev.nanite.mlp'


    sourceSets.main.resources.srcDir project.file('src/generated/resources')

    base {
        archivesName = "${project.property("mod_name")}-${project.name}".toLowerCase()
    }
    repositories {
        maven {
            name = "Creeperhost"
            url = uri("https://maven.creeperhost.net/")
        }
        maven {
            name = "UnRealDinnerbone"
            url = "https://maven.unreal.codes/releases"
        }
    }
    tasks.withType(ProcessResources).configureEach {
        outputs.upToDateWhen { false }
    }

    publishing {
        repositories {
            if (providers.environmentVariable("NANITE_TOKEN").isPresent()) {
                maven {
                    def isSnapshot = providers.environmentVariable("SNAPSHOT").map {it == "true"}.getOrElse(false)
                    url "https://maven.nanite.dev/${isSnapshot ? 'snapshots' : 'releases'}"
                    credentials {
                        username = "nanite"
                        password = providers.environmentVariable("NANITE_TOKEN").get()
                    }
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.getArchivesBaseName()
            }
        }
    }


}


publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    def fabricOptions = publishOptions {
        file = project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "[FABRIC][${minecraft_version}] ${project.name} ${mod_version}"
        modLoaders.add("fabric")
    }

    def forgeOptions = publishOptions {
        file = project.provider { project(":forge").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "[FORGE][${minecraft_version}] ${project.name} ${mod_version}"
        modLoaders.add("forge")
    }

    def neoForge = publishOptions {
        file = project.provider { project(":neoforge").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "[NEOFORGE][${minecraft_version}] ${project.name} ${mod_version}"
        modLoaders.add("neoforge")
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        projectId = "${curseforge_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, fabricOptions)
        requires {
            slug = "architectury-api"
        }
        requires {
            slug = "fabric-api"
        }
    }

    curseforge("curseforgeForge") {
        from(curseForgeOptions, forgeOptions)
        requires {
            slug = "architectury-api"
        }
    }

    curseforge("curseforgeNeoForge") {
        from(curseForgeOptions, neoForge)
        requires {
            slug = "architectury-api"
        }
    }

}




