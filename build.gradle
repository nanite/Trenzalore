import dev.nanite.mlp.tasks.SingleOutputJar

plugins {
    id("dev.nanite.mlp") version("0.0.2")
    id("java")
    id "me.modmuss50.mod-publish-plugin" version "0.3.0"

    id("fabric-loom") version("1.3-SNAPSHOT") apply(false)
    id("net.minecraftforge.gradle") version("6.0.+") apply(false)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

multiLoader.root() {
    minecraftVersion.set("1.20.1")
    modID.set("trenzalore")
    singleOutputJar.set(true)
    accessWidenerFile.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
}

allprojects {
    def isSnapshot = providers.environmentVariable('SNAPSHOT').is("true")
    version = "${mod_version}+mc${minecraft_version}${isSnapshot ? '-SNAPSHOT' : ''}"
    setArchivesBaseName("${mod_name}-${project.name}".toLowerCase())
    group = "com.unrealdinnerbone"
}

subprojects {
    apply plugin: 'dev.nanite.mlp'
    apply plugin: 'maven-publish'

    sourceSets.main.resources.srcDir 'src/generated/resources'

    base {
        archivesName = "${mod_name}-${project.name}".toLowerCase()
    }

    repositories {
        maven {
            name = "Creeperhost"
            url = uri("https://maven.creeperhost.net/")
        }
    }

    publishing {
        repositories {
            if (providers.environmentVariable("NANITE_TOKEN").isPresent()) {
                maven {
                    url "https://maven.nanite.dev/${isSnapshot ? 'snapshots' : 'releases'}"
                    credentials {
                        username = "nanite"
                        password = providers.environmentVariable("NANITE_TOKEN").get()
                    }
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.getArchivesBaseName()
            }
        }
    }

}

tasks.register("singleJar", SingleOutputJar.class) {
    getArchiveIdentifier().set("TrenzaloreML")
    getOutput().set(project.file("build/libs/Trenzalore-${project.version}.jar"))
}


publishMods {
    file = tasks.singleJar.output
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    curseforge {
        projectId = project.property("curse_id")
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        modLoaders.add("fabric")
        modLoaders.add("forge")
        requires {
            slug = "fabric-api"
        }
    }
}

