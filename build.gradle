import dev.nanite.mlp.tasks.SingleOutputJar

plugins {
    id("dev.nanite.mlp") version("0.0.1")
    id("java")
    id("fabric-loom") version("1.3-SNAPSHOT") apply(false)
    id("net.minecraftforge.gradle") version("6.0.+") apply(false)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

multiLoader.root() {
    minecraftVersion.set("1.20.1")
    modID.set("trenzalore")
    singleOutputJar.set(true)
    accessWidenerFile.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
}

allprojects {
    def isSnapshot = providers.environmentVariable('SNAPSHOT').is("true")
    version = "${mod_version}+mc${minecraft_version}${isSnapshot ? '-SNAPSHOT' : ''}"
}

subprojects {
    apply plugin: 'dev.nanite.mlp'
//    apply plugin: 'maven-publish'

    sourceSets.main.resources.srcDir 'src/generated/resources'

    base {
        archivesName = "${mod_name}-${project.name}"
    }

    repositories {
        maven {
            name = "Creeperhost"
            url = uri("https://maven.creeperhost.net/")
        }
    }
}

tasks.withType(SingleOutputJar.class) {
    getArchiveIdentifier().set("TrenzaloreML")
    getOutput().set(project.file("build/libs/Trenzalore-${project.version}.jar"))
}

//publishMods {
//    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
//    changelog = file("./CHANGELOG.md").text
//    version = "${mod_version}"
//    type = STABLE
//
//    def fabricOptions = publishOptions {
//        file = project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
//        displayName = "${project.name} Fabric ${mod_version}+mc${minecraft_version}"
//        modLoaders.add("fabric")
//    }
//
//    def forgeOptions = publishOptions {
//        file = project.provider { project(":forge").tasks.jar }.flatMap { it.archiveFile }
//        displayName = "${project.name} Forge ${mod_version}+mc${minecraft_version}"
//        modLoaders.add("forge")
//    }
//
//    def neoOptions = publishOptions {
//        file = project.provider { project(":neo").tasks.jar }.flatMap { it.archiveFile }
//        displayName = "${project.name} NeoForged ${mod_version}+mc${minecraft_version}"
//        modLoaders.add("neoforge")
//    }
//
//    def curseForgeOptions = curseforgeOptions {
//        accessToken = providers.environmentVariable("CURSE_TOKEN")
//        projectId = "${curseforge_id}"
//        minecraftVersions.add("${minecraft_version}")
//    }
//
//    def modrinthOptions = modrinthOptions {
//        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
//        projectId = "${modrinth_id}"
//        minecraftVersions.add("${minecraft_version}")
//    }
//
//    curseforge("curseforgeFabric") {
//        from(curseForgeOptions, fabricOptions)
//        requires {
//            slug = "fabric-api"
//        }
//    }
//
//    curseforge("curseforgeForge") {
//        from(curseForgeOptions, forgeOptions)
//    }
//
//    curseforge("curseforgeNeo") {
//        from(curseForgeOptions, neoOptions)
//    }
//
//    modrinth("modrinthFabric") {
//        from(modrinthOptions, fabricOptions)
//        requires {
//            slug = "fabric-api"
//        }
//    }
//
//    modrinth("modrinthForge") {
//        from(modrinthOptions, forgeOptions)
//    }
//
//    modrinth("modrinthNeo") {
//        from(modrinthOptions, neoOptions)
//    }
//
//    github {
//        file = project.provider { project(":forge").tasks.jar }.flatMap { it.archiveFile }
//        additionalFiles.from project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
//        additionalFiles.from project.provider { project(":neo").tasks.jar }.flatMap { it.archiveFile }
//        repository = "${github_repo}"
//        accessToken = providers.environmentVariable("GITHUB_TOKEN")
//        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
//    }
//}

