import java.nio.file.Files

plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
    id 'net.darkhax.curseforgegradle' version '1.0.14'

}

Project commonProject = parent == rootProject ? parent.project("Common") : parent.project("Trenzalore-Common")

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation commonProject
}

loom {
    mixin {
        defaultRefmapName = "${mod_id}.refmap.json"
    }
    runs {
        client {
            client()
            setConfigName("Trenzalore Fabric Client")
            ideConfigGenerated(true)
            vmArg("-Dmixin.debug.export=true")
            runDir("run_client")
        }
        server {
            server()
            setConfigName("Trenzalore Fabric Server")
            ideConfigGenerated(true)
            vmArg("-Dmixin.debug.export=true")
            runDir("run_server")
        }
        data {
            inherit client
            setConfigName("Trenzalore Fabric Data")
            ideConfigGenerated(true)


            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${commonProject.file("src/main/generated")}")
            vmArg("-Dfabric-api.datagen.modid=${mod_id}")

            runDir "build/datagen"

        }
    }
}


processResources {
    from commonProject.sourceSets.main.resources

    def buildProps = project.properties.clone()
    buildProps.put("version", project.version)
    buildProps.put("mod_version", parent.property("mod_version"))
    buildProps.put("minecraft_version", parent.property("minecraft_version"))
    filesMatching("fabric.mod.json") {
        expand buildProps
    }
}

tasks.withType(JavaCompile) {
    source(commonProject.sourceSets.main.allSource)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName + "-" + project.name
            version project.version
            from components.java
        }
    }

    repositories {
        if (ENV.NANITE_TOKEN) {
            maven {
                url "https://maven.nanite.dev/${SNAPSHOT ? "snapshots" : "releases"}"
                credentials {
                    username = "nanite"
                    password = "${ENV.NANITE_TOKEN}"
                }
            }
        }
    }
}


task curseforgePublish(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {

    apiToken = findProperty('CURSE_TOKEN')
    def mainFile = upload(findProperty('curse_id'), remapJar)
    mainFile.changelog = file("../CHANGELOG.md")
    mainFile.releaseType = "beta"
    mainFile.changelogType = "markdown"
    mainFile.addJavaVersion("Java 17")
}

//parent.tasks.curseforgePublish.dependsOn tasks.publishUnified
